// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: rpc_service.proto

package pb

import (
	context "context"
	pb "github.com/akashabbasi/go-grpc/server/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrpcServerService_Signup_FullMethodName  = "/pb.GrpcServerService/Signup"
	GrpcServerService_Login_FullMethodName   = "/pb.GrpcServerService/Login"
	GrpcServerService_GetUser_FullMethodName = "/pb.GrpcServerService/GetUser"
)

// GrpcServerServiceClient is the client API for GrpcServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServerServiceClient interface {
	Signup(ctx context.Context, in *pb.SignupRequestMessage, opts ...grpc.CallOption) (*pb.SignupResponseMessage, error)
	Login(ctx context.Context, in *pb.LoginRequestMessage, opts ...grpc.CallOption) (*pb.LoginResponseMessage, error)
	GetUser(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*pb.GetUserResponse, error)
}

type grpcServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServerServiceClient(cc grpc.ClientConnInterface) GrpcServerServiceClient {
	return &grpcServerServiceClient{cc}
}

func (c *grpcServerServiceClient) Signup(ctx context.Context, in *pb.SignupRequestMessage, opts ...grpc.CallOption) (*pb.SignupResponseMessage, error) {
	out := new(pb.SignupResponseMessage)
	err := c.cc.Invoke(ctx, GrpcServerService_Signup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServerServiceClient) Login(ctx context.Context, in *pb.LoginRequestMessage, opts ...grpc.CallOption) (*pb.LoginResponseMessage, error) {
	out := new(pb.LoginResponseMessage)
	err := c.cc.Invoke(ctx, GrpcServerService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServerServiceClient) GetUser(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*pb.GetUserResponse, error) {
	out := new(pb.GetUserResponse)
	err := c.cc.Invoke(ctx, GrpcServerService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServerServiceServer is the server API for GrpcServerService service.
// All implementations must embed UnimplementedGrpcServerServiceServer
// for forward compatibility
type GrpcServerServiceServer interface {
	Signup(context.Context, *pb.SignupRequestMessage) (*pb.SignupResponseMessage, error)
	Login(context.Context, *pb.LoginRequestMessage) (*pb.LoginResponseMessage, error)
	GetUser(context.Context, *EmptyRequest) (*pb.GetUserResponse, error)
	mustEmbedUnimplementedGrpcServerServiceServer()
}

// UnimplementedGrpcServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServerServiceServer struct {
}

func (UnimplementedGrpcServerServiceServer) Signup(context.Context, *pb.SignupRequestMessage) (*pb.SignupResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedGrpcServerServiceServer) Login(context.Context, *pb.LoginRequestMessage) (*pb.LoginResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGrpcServerServiceServer) GetUser(context.Context, *EmptyRequest) (*pb.GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedGrpcServerServiceServer) mustEmbedUnimplementedGrpcServerServiceServer() {}

// UnsafeGrpcServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServerServiceServer will
// result in compilation errors.
type UnsafeGrpcServerServiceServer interface {
	mustEmbedUnimplementedGrpcServerServiceServer()
}

func RegisterGrpcServerServiceServer(s grpc.ServiceRegistrar, srv GrpcServerServiceServer) {
	s.RegisterService(&GrpcServerService_ServiceDesc, srv)
}

func _GrpcServerService_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.SignupRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServiceServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcServerService_Signup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServiceServer).Signup(ctx, req.(*pb.SignupRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServerService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.LoginRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcServerService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServiceServer).Login(ctx, req.(*pb.LoginRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcServerService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServerServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcServerService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServerServiceServer).GetUser(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcServerService_ServiceDesc is the grpc.ServiceDesc for GrpcServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GrpcServerService",
	HandlerType: (*GrpcServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _GrpcServerService_Signup_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GrpcServerService_Login_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _GrpcServerService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_service.proto",
}
